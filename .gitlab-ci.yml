before_script:
# - 'which ssh-agent || ( apt-get install openssh-client -y )'
# - eval $(ssh-agent -s)
# - mkdir -p ~/.ssh
# - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
- pwd
- which nodejs
- nodejs -v
- which npm
- npm -v
- which yarn
- yarn --version
- yarn config set cache-folder .yarn

cache:
  key: "$CI_BUILD_REF_NAME"
  paths:
  - node_modules/
  - .yarn/

# jobs sequense pipeline
stages:
- test
- build
- deploy

# test job: lint, test project
test:
  tags:
  - node-10
  script:
  - yarn install
  - yarn lint
  - yarn test
  stage: test

# build job: build project and upload artifacts for deploy
build-demo:
  # It would upload artifacts to gitlab and next stage for deploy
  artifacts:
    name: "${CI_BUILD_REF_NAME}_${CI_BUILD_REF}"
    expire_in: 1 day
    paths:
    - _public/
  tags:
  - node-10
  script:
  - yarn install
  - yarn build:demo
  - yarn build:storybook
  stage: build
  only:
  - demo

# build job: build project and upload artifacts for deploy
build-stage:
  # It would upload artifacts to gitlab and next stage for deploy
  artifacts:
    name: "${CI_BUILD_REF_NAME}_${CI_BUILD_REF}"
    expire_in: 1 day
    paths:
    - _public/
  tags:
  - node-10
  script:
  - yarn install
  - yarn build:stage
  stage: build
  only:
  - stage

# build job: build project and upload artifacts for deploy
build:
  # It would upload artifacts to gitlab and next stage for deploy
  artifacts:
    name: "${CI_BUILD_REF_NAME}_${CI_BUILD_REF}"
    expire_in: 1 day
    paths:
    - _public/
  tags:
  - node-10
  script:
  - yarn install
  - yarn build
  stage: build
  only:
  - master

.deploy_template: &deploy_template
  stage: deploy
  tags:
    - basic
  artifacts:
    expire_in: 2 days
  retry: 2
  before_script:
    - | 
      echo "[INFO] ssh prep"
      eval $(ssh-agent -s)
      mkdir -p ~/.ssh
      echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      case $CI_COMMIT_REF_NAME in
        demo)
          _SSH_USER=$_DEV_SSH_USERNAME_FE
          _SSH_HOST=$_DEV_SSH_HOST
          _SSH_PATH=$_DEV_SSH_PATH_FE
          _SSH_PEMFILE=$_DEV_SSH_PEMFILE_FE
          ;;
        stage)
          _SSH_USER=$_STG_SSH_USERNAME_FE
          _SSH_HOST=$_STG_SSH_HOST
          _SSH_PATH=$_STG_SSH_PATH_FE
          _SSH_PEMFILE=$_STG_SSH_PEMFILE_FE
          ;;
        master)
          _SSH_USER=$_PROD_SSH_USERNAME_FE
          _SSH_HOST=$_PROD_SSH_HOST
          _SSH_PATH=$_PROD_SSH_PATH_FE
          _SSH_PEMFILE=$_PROD_SSH_PEMFILE_FE
          ;;
        *)
          echo "Branch not supported"
          exit 1
      esac
      chmod 400 $_SSH_PEMFILE
    - |
      RSH() {
        echo -ne '\e[1;34m==>\e[0m ' >&1
        echo "ssh ${_SSH_USER}@${_SSH_HOST} $*" >&1
        ssh -i ${_SSH_PEMFILE} ${_SSH_USER}@${_SSH_HOST} $@
      }
      RCP() {
        scp -i ${_SSH_PEMFILE} $1 ${_SSH_USER}@${_SSH_HOST}:$2
      }

# deploy job
deploy-demo:
  <<: *deploy_template
  script:
  # You should add deploy script here
  # 打包前端資料
  - _pkg="$demo_${CI_PIPELINE_ID}"
  - mv .htaccess _public
  - tar zcf ${_pkg}.tgz -C _public .
  # 上傳打包資料到 server
  - RCP ${_pkg}.tgz /tmp/
  # 解壓縮打包的資料到 apache 資料夾
  - RSH "mkdir -p /tmp/${_pkg}"
  - |
    echo "[INFO] deploy..."
    RSH "tar zxf /tmp/${_pkg}.tgz -C /tmp/${_pkg}"
    RSH "rsync -aq --delete /tmp/${_pkg}/ ${_SSH_PATH}"
  # Clean up
  - |
    echo "[INFO] Clean up..."
    RSH "rm -rf /tmp/${_pkg}*"
  environment:
    name: demo
    url: https://DOMAIN.25demo.com
  stage: deploy
  only:
  - demo

# deploy job
deploy-stage:
  <<: *deploy_template
  script:
  # You should add deploy script here
  # 打包前端資料
  - _pkg="$stage_${CI_PIPELINE_ID}"
  - mv .htaccess _public
  - tar zcf ${_pkg}.tgz -C _public .
  # 上傳打包資料到 server
  - RCP ${_pkg}.tgz /tmp/
  # 解壓縮打包的資料到 apache 資料夾
  - RSH "mkdir -p /tmp/${_pkg}"
  - |
    echo "[INFO] deploy..."
    RSH "tar zxf /tmp/${_pkg}.tgz -C /tmp/${_pkg}"
    RSH "rsync -aq --delete /tmp/${_pkg}/ ${_SSH_PATH}"
  # Clean up
  - |
    echo "[INFO] Clean up..."
    RSH "rm -rf /tmp/${_pkg}*"
  environment:
    name: stage
    url: https://DOMAIN.25demo.com
  stage: deploy
  only:
  - stage

# deploy job
deploy-master:
  <<: *deploy_template
  script:
  # You should add deploy script here
  # 打包前端資料
  - _pkg="$production_${CI_PIPELINE_ID}"
  - mv .htaccess _public
  - tar zcf ${_pkg}.tgz -C _public .
  # 上傳打包資料到 server
  - RCP ${_pkg}.tgz /tmp/
  # 解壓縮打包的資料到 apache 資料夾
  - RSH "mkdir -p /tmp/${_pkg}"
  - |
    echo "[INFO] deploy..."
    RSH "tar zxf /tmp/${_pkg}.tgz -C /tmp/${_pkg}"
    RSH "rsync -aq --delete /tmp/${_pkg}/ ${_SSH_PATH}"
  # Clean up
  - |
    echo "[INFO] Clean up..."
    RSH "rm -rf /tmp/${_pkg}*"
  environment:
    name: master
    url: https://DOMAIN/
  stage: deploy
  only:
  - master